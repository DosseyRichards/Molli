var mongoose = require('mongoose');
var async = require('async');
var models = require('models');
////model variables
var user = models.user;
var montage = models.montage;
var video = models.video;
var jwt = require('jsonwebtoken');
var thumbler = require('video-thumb');

/*


///Dashboard page for logged in users.
exports.getDashboard = function(req, res, next) {
	res.send('Dashboard');	
};

//////Page to add a new montage. 
exports.getNewMontage = function(req, res, next) {
	res.render('new_Montage');	
};

/////account settings 
exports.getAccountSettings = function(req, res, next) {
	res.render('account_settings');	
};

*/

exports.postAccountSettings = function(req, res, next) {
	user.find({_id:req.user._id}, function(err, this_user){
		this_user.username = req.body.username;
		this_user.save();
	});	
};





exports.registerUser = function(req, res, next){
	if(req.body.username && req.body.password){
		user.find({username: req.body.username}, function(err, docs){
			if(docs.length < 1){
				var new_user  = new user;
				new_user.username = req.body.username;
				new_user.password = req.body.password;
				new_user.save(err);
				if(new_user){
			          var token = jwt.sign(new_user, 'ImIInLoveWITHTHEcoc0', {
          				expiresIn: '4240d'
        				});
      			res.json({success:true, message:"You got the token!", token: token, user:new_user});
				}
			}
			else{
				res.json({success:false, result:"error", message:"A user with that username already exist."});
			}
		})
	}		
}






//////creating a new montage and then processing the videos one at time to add
////them to the database as their own documents while making sure they share a 
////relationship with this new montage.
exports.postNewMontage = function(req, res, next) {
	videos = req.body.videos;
	this_montage = new montage;
	this_montage.title = req.body.title;
	
	async.each(req.files['videos'], function(file, callback){
		///making a new video mongoose document for each video
		console.log("processing video " + file.filename);
		this_video = new video;
/*		this_user  = req.user._id;
*/		this_video.location = file.filename;
		this_video.belongs_to_montage = this_montage._id;
		////pushing video into Montage document.
		this_montage.videos.push({video:file.filename});
		this_video.save(); 	
		callback();
	}, function(err){
			if(!err){
				if(req.decoded != null){
					this_montage.initial_video = "http://127.0.0.1:3000/uploads/"  + this_montage.videos[0].video;
					this_montage.save();
					this_montage.belongs_to_user = req.decoded._doc._id;
					this_montage.belongs_to_username = req.decoded._doc.username;			
					this_montage.thumbnail_location = req.files['thumbnail_image'][0].filename;	
					console.log(this_montage);
					res.json({success:true, message:"Montage Sucessfully Created!", montage:this_montage});	
				}
				else{
					this_montage.initial_video = "http://127.0.0.1:3000/uploads/"  + this_montage.videos[0].video;
					this_montage.thumbnail_location = req.files['thumbnail_image'][0].filename;
					this_montage.save();
					console.log("Montage Sucessfully Created!"+ this_montage);
					res.json({success:true, message:"Montage Sucessfully Created!", montage:this_montage});	
				}	 							
			}
			else{
				res.json({success:false, message:err});
			}	
	});
	
};



///fetching all mongodb documents
exports.findAllMontages = function(req, res, next) {
	montage.find({}, function(err, docs){
		res.json({results:[docs]});
	});		
};


///fetching all mongodb documents that belong to this user
exports.findMyMontages = function(req, res, next) {
	montage.find({belongs_to_user: req.decoded._id}, function(err, docs){
		res.json({results:[docs]});
	});		
};



///getting a specific montage based on ID and updating it's views by one
exports.getMontage = function(req, res, next) {
	montage.find({}, function(err, rand_docs){
		rand_montage_int  = Math.floor((Math.random()* rand_docs.length -1) + 0);
		rand_montage = rand_docs[rand_montage_int];
			montage.update({_id: req.params.this_montage}, {$inc:{views:1}}, function(err, update_docs){
				montage.findOne({_id: req.params.this_montage}, function(err, docs){
					res.json({result:docs, next_result:rand_docs});
				});	
		});	
	});
};


///getting most recent montages
exports.getPopularMontage = function(req, res, next) {
	montage.find({}).sort({views:-1,created_on:-1}).limit(20).exec(function(err, docs){
		res.json({results:docs});
	});		
};

exports.user_details = function(req, res, next){
	res.json({result: req.body})
};



///getting most recent montages
exports.getRecentMontage = function(req, res, next) {
	montage.find({}).sort({created_on:-1}).limit(10).exec(function(err, docs){
		res.json({results:docs});
	});		
};

exports.getUserMontages = function(req, res, next) {
	montage.find({belongs_to_user:req.decoded._doc._id}).sort({created_on:-1}).limit(10).exec(function(err, docs){
		res.json({results:docs});
	});		
};


exports.getMoreRecentMontageInitial = function(req, res, next) {
	montage.find({}).sort({created_on:-1}).limit(10).exec(function(err, docs){
		res.json({results:docs});
		console.log(docs);
	});		
};

exports.getMoreRecentMontage = function(req, res, next) {
	var skip_int = req.params.page * 10;
	montage.find({}).skip(skip_int).sort({created_on:-1}).limit(10).exec(function(err, docs){
		res.json({results:docs});
		console.log(docs);
	});		
};


exports.getMorePopularMontage = function(req, res, next) {
	var skip_int = req.params.page * 10;
	montage.find({}).skip(skip_int).sort({views:-1, created_on:-1}).limit(10).exec(function(err, docs){
		res.json({results:docs});
		console.log(docs);
	});		
};



exports.getMoreUserMontage = function(req, res, next) {
	var skip_int = req.params.page * 10;
	montage.find({belongs_to_user: req.decoded._doc._id}).skip(skip_int).sort({created_on:-1}).limit(10).exec(function(err, docs){
		res.json({results:docs});
		console.log(docs);
	});		
};




exports.verifyAndSupplyToken = function(req, res, next){
	var token = req.body.token || req.query.token || req.headers['x-access-token'];
	// decode token
	if (token) {
		// verifies secret and checks exp
		jwt.verify(token, 'ImIInLoveWITHTHEcoc0', function(err, decoded) {      
		  if (err) {
		    return res.json({ success: false, message: 'Failed to authenticate token.' });    
		  } else {
		    // if everything is good, save to request for use in other routes
		    req.decoded = decoded;    
		    next();
		  }
		});
	};
};

exports.verifyAndSupplyTokenForMontage = function(req, res, next){
	console.log(JSON.stringify(req.body, null, 2));
	var token = req.body.token || req.query.token || req.headers['x-access-token'];
	// decode token
	if (token) {
		// verifies secret and checks exp
		jwt.verify(token, 'ImIInLoveWITHTHEcoc0', function(err, decoded) {      
		  if (err) {
		    return res.json({ success: false, message: 'Failed to authenticate token.' });    
		  } else {
		    // if everything is good, save to request for use in other routes
		    req.decoded = decoded;    
		    next();
		  }
		});
	}
	else{
		req.decoded = null;
		next();
	}
};

//////test middleware
exports.getUserAndToken = function(req, res, next){
	res.json(req.decoded);

};


exports.getUser = function(req, res, next){
	res.json(req.decoded._doc);
}

